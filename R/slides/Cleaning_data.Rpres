<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Cleaning Data with R
========================================================
author: Ben Bellman
date: August 29, 2018
autosize: true
incremental: false

Plan for Workshop
========================================================

- **Tues. Morning:** 
    - Introduction to R, Data Manipulation (```tidyverse``` and ```dplyr```)
- **Tues. Afternoon:** 
    - Data Visualization (```ggplot2```), Stats and Modeling
- **Wed. Morning:** 
    - Cleaning Data, Advanced Topics
- **Wed. Afternoon:** 
    - Twitter + Census APIs, network analysis, spatial data, web scraping

Refresh from Yesterday
========================================================
- Introduction to R
    - Anatomy of a command
    - Data classes and functions
- Using ```dplyr```
    - ```tidyverse``` packages
    - ```select()```, ```filter()```, ```arrange()```, ```summarise()```, and ```mutate()```
    - The piping operator, ```%>%```
- Using ```ggplot2```
    - Initialize with ```ggplot()```
    - Customize with additional functions
- Modeling workflows
    
Basics: Anatomy of a command
========================================================
```{r eval = F} 
obj <- funct(arg1 = data,
             arg2 = T,
             arg3 = "setting",
             ...)
```

- ```obj``` = output is stored in object
- ```<-``` = the assignment operator for storing results
    - Results are printed to console if no assignment
- ```funct``` = name of function being called
- ```arg1``` = first argument is usually object/data being operated on
- ```arg2, arg3``` = additional arguments that change how ```funct``` works
    - Can refer to true/false value, different methods, etc.
    - Have default values, so not always necessary to use them
    - Functions also assume argument order, naming arguments not required

The tidyverse Philosophy
========================================================

- Tidy data is data where: 
    1. Each variable is in a column.
    2. Each observation is a row. 
    3. Each value is a cell.

- Code is written to be human legible, read like a recipe
    - Implemented with ```%>%```, the piping operator

- Tidy data objects can be analyzed with all tidyverse functions

tidyr and reshape2
========================================================

- Tools to shape data into tidy framework
- When do I need to worry about this?
    - Unstructured data sources: web scraping with ```rvest```, reading documents, combining data from multiple tables, etc.
    - Information in one column can be broken into multiple columns
    - Transforming multilevel data between long/wide formats
    
reshape2 functions
========================================================

- `reshape2` must be loaded separately from the `tidyverse`
```{r}
library(tidyverse)
library(reshape2)
library(here)
```
- Works like "reshape" in Stata, but in two parts
- `melt()` decomposes the data into a key-value format
- `dcast()` reconstructs the "melted" data at a new level

melt() function
========================================================
class: small-code
- Let's reshape the salaries data so it has one row for every person
    - Searches automatically for numeric columns
    - these columns are saved under column "variable"
    - numeric values are saved under column "values"
```{r}
salaries <- read_csv(here("data","white-house-salaries.csv")) %>% 
  mutate(year = factor(year))     # need year to not be numeric
melted <- melt(salaries) %>% as_tibble()

select(melted, variable, value)
```

dcast() function
========================================================
class: small-code
- `dcast()` needs a formula to reconstruct the data
    - LHS is the new unit of observation
    - RHS is the combo of "variable" with the lower level of observation
    - Variables not in formula are dropped
```{r}
employees <- dcast(melted, employee_name ~ variable + year) %>% 
  as_tibble()

employees
```

tidyr functions
========================================================

- `tidyr` functions are better for tidying specific columns
    - `melt()` and `dcast()` are best for large-scale transformation of many columns

- ```gather()``` and ```spread()``` transform across ID levels 
    
- ```separate()``` and ```extract()``` both take information from one column, and split it into multiple columns

gather() function
========================================================

- Also uses concept of "key-value" pairs to separate variables

- Take a simple example with two heartrate measurements taken for three people
- Each measurement is associated with a drug, recorded in separate columns
- The ```gather()``` function reassigns the variable names (drugs) to a column, and gathers the heartrate measure into one column

gather() function
========================================================
class: small-code
```{r}
library(tidyverse)

messy <- tibble(
  name = c("Wilbur", "Petunia", "Gregory"),
  a = c(67, 80, 64),
  b = c(56, 90, 50)
)

messy
```

gather() function
========================================================
class: small-code
```{r}
tidy <- messy %>%
  gather(drug, heartrate, a, b)

tidy
```

spread() function
========================================================

- The ```spread()``` function does the opposite of ```gather()```
    - When two columns are a key-value pair, you can make they key variable into its own columns
    - Best example in population research is longitudinal data
    - Do we want one row for each person with different columns for time points?
    - Or do we want multiple rows for each person, with one column holding all measurements?
    
spread() function
========================================================
class: small-code
```{r}
tidy

tidy %>%
  spread(drug, heartrate)
```

separate() function
========================================================

- ```separate()``` is used to split one column into two columns
    - Compare to "split" in Stata
    - Use a regular expression to identify "where" to split the data
- ```extract()``` essentially does the same thing, but uses regular expressions to extract data rather than simply split a string

separate() function
========================================================
class: small-code
```{r}
employees <- employees %>% 
  separate(employee_name, into = c("last_name", "first_mi"), sep = ", ", extra = "merge")

employees 
```


extract() function
========================================================
- Extracts the patterns matched within the parenteses
class: small-code
```{r}
employees <- employees %>% 
  extract(first_mi, into = c("first_name", "mi"), regex = "^([a-z]*) ([a-z])$", remove = F)

employees 
```


stringr: Using Text Data
========================================================

- Often, "data cleaning" means text cleaning
    - Remove unwanted text, extract wanted text
    - Recognize patterns, etc.
- ```stringr``` package is best toolkit for these operations
    - Lots of functions, can't learn them all
    - Uses "regular expressions" for pattern recognition
    - Beyond the scope of workshop, but powerful and relatively easy to learn
    - [Here's the tidyverse website tutorial](https://stringr.tidyverse.org/articles/regular-expressions.html)
- Let's explore the salaries data

Basic stringr
========================================================
class: small-code
First, let's take a look at what kind of job titles there are
```{r}
unique(salaries$position)
```


Basic stringr
========================================================
class: small-code
- ```str_``` functions take vectors of text strings, return new vectors
- ```str_detect()``` simply returns a logical vector
    - Elements are true when the pattern was found, false when not
```{r}
unique(salaries$position) %>%
  str_detect("advisor") %>% 
  table()
```

Basic stringr
========================================================
class: small-code
- ```str_detect()``` is useful for subsetting data
```{r}
advisors <- salaries %>%
  filter(str_detect(position, "advisor")) %>%
  .$position %>%          # using $ returns a vector instead of a data frame
  unique()
advisors
```

Basic stringr
========================================================
class: small-code
- ```str_replace()``` is critical for text cleaning
- Looks for given pattern, and replaces with new string
```{r}
str_replace(advisors[1:3], "advisor", "party")
```
- Or that text can be removed
```{r}
str_remove(advisors[1:3], "advisor")
```

Basic stringr
========================================================
class: small-code
- ```str_replace_all()``` replaces all intances of pattern if it appears more than once in a string
```{r}
advisors[1:3] %>% str_replace(" ", "-")

advisors[1:3] %>% str_replace_all(" ", "-")
```

Basic stringr
========================================================
class: small-code
- There are also useful functions for dealing with letter cases
```{r}
str_to_upper(advisors[1:3])

str_to_title(advisors[1:3])
```


Joins and Merges
========================================================
class: small-code
- Joining data tables is key for data management
- `dplyr` provides effective `_join()` family
- Let's create some test data
```{r}
a <- tibble(name = c("Jen", "Chuck", "Kaitlyn", "Jose"),
            age = c(31, 47, 23, 25))

b <- tibble(name = c("Jose", "Jen", "Chuck", "Gloria"),
            gender = c("M", "F", "M", "F"))
```

inner_join()
========================================================
class: small-code
- Functions automatically detect join columns
    - Can be specified with `by =`
- `inner_join()` returns all matching rows from a and b
class: small-code
```{r}
inner_join(a, b)
```

full_join()
========================================================
class: small-code
- `full_join()` returns all rows from both a and b
```{r}
full_join(a, b)
```

left_join() and right_join()
========================================================
class: small-code
- `left_join()` returns all rows from a
- `right_join()` returns all rows from b
```{r}
left_join(a, b)
right_join(a, b)
```

Handling missing data
========================================================
class: small-code
- `tidyr` also provides functions to handle missing values
- `drop_na()` simply removes rows with any missing value
```{r}
m <- full_join(a, b)
m
drop_na(m)
```

Handling missing data
========================================================
class: small-code
- `replace_na()` replaces `NA` with specific values by column
    - If input is a data frame, specify with a named list 
    - If input is a vector, specify with a single value
```{r}
subs <- list(age = 0, gender = "blank")
replace_na(m, replace = subs)
```

Questions?
========================================================