<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Data Manipulation - tidyverse and dplyr
========================================================
author: Ben Bellman
date: August 28, 2018
autosize: true
incremental: false

tidyverse vs. base R
========================================================

- So far, material has been from base packages

- Some base functions are still useful, but it's dated

- Instead, I want you to learn the ```tidyverse```:
    - A foundational suite of packages for data analysis
    - A philosphy about programming style and best practices
    - People are increasingly making R "tidy"
    - ```sf```, ```tidytext```, ```tidygraph```, ```tidybayes```, etc.
    - Spearheaded by RStudio development team
    
Loading packages
========================================================
class: small-code
- We can manage packages through commands

- Install them once, but library at the start of every session

```{r eval=F}
install.packages("tidyverse")
library(tidyverse)
```
```{r echo=F}
library(tidyverse)
```


The tidyverse Suite
========================================================

- These slides cover:
    - ```tibble``` : A "modern" version of a data frame
    - ```readr``` : Tools for importing text data files
    - ```dplyr``` : Tools for data manipulation and analysis
    - some other tidy extras I find useful!

- Includes five other core packages, like ```ggplot2``` and ```stringr```


The tidyverse Philosophy
========================================================

- Tidy data is data where: 
    1. Each variable is in a column.
    2. Each observation is a row. 
    3. Each value is a cell.

- Code is written to be human legible, read like a recipe
    - Implemented with ```%>%```, the piping operator

- Tidy data objects can be analyzed with all tidyverse functions

The Tibble
========================================================
class: small-code
- ```tibble``` package introduces a data frame variant: ```"tbl"```
- Some useful technical differences
    - Good console printing
    - No row names
    - Does not convert character columns to factors
```{r}
tbl <- tibble(
  x = 1:4, 
  y = 1, 
  z = x ^ 2 + y
)
tbl
```

The Tibble
========================================================
class: small-code
- Referencing tibbles by column:
```{r}
tbl$x
tbl[["x"]]
tbl[[1]]
```

Using readr
========================================================

- Introduces new family of ```read_``` functions
    - ```read_csv()```: comma separated (CSV) files
    - ```read_tsv()```: tab separated files
    - ```read_delim()```: general delimited files
    - ```read_fwf()```: fixed width files
    - ```read_table()```: tabular files where colums are separated by white-space.
    - ```read_log()```: web log files
- Functions from ```readr``` return data as tibbles

Using readr
========================================================
class: small-code
- Automatically prints class of columns
```{r}
library(here)
salaries <- read_csv(here("data","white-house-salaries.csv"))

# useful tibble function to preview data
glimpse(salaries)
```

readr + haven + readxl
========================================================
class: small-code
- The ```haven``` package extends the ```read_``` family to data from other statistics software formats
    - ```read_dta()```
    - ```read_sas()```
    - ```read_spss()```
- The ```readxl``` package loads Excel spreadsheets into R
    - ```read_xlsx()```
- Must be installed and loaded separately

Starting with dplyr
========================================================

- ```dplyr``` is how we can manipulate the data and run calculations
- Five main functions or "verbs" that operate on data frames
     - ```select()``` picks variables based on their names.
     - ```filter()``` picks cases based on their values.
     - ```arrange()``` changes the ordering of the rows.
     - ```mutate()``` adds new variables that are functions of existing variables
     - ```summarise()``` calculates single values from many rows.
- Other important functions and variants included
    - e.g. ```group_by()``` and ```ungroup()```
    
Starting with dplyr
========================================================

- Functions in ```dplyr``` always take a data frame as the first argment

- Subsequent arguments will refer to variables, or define new variables

Practice Data
========================================================

- We will use the White House Salaries dataset to learn these functions.
- Nine variables
    - Employee name, inferred gender
    - Salary
    - Position, full/part time status, year
    - President, party, term
- [Link to data.world page](https://data.world/chipoglesby/whitehousesalaries/workspace/file?filename=white-house-salaries.csv) for downloading and more info

select() function
========================================================
class: small-code
- ```select()``` creates a new tibble, keeping only the desired columns

```{r}
names(salaries)    # base R, read/change vector of column names
select(salaries, president, party, year)
```

select() function
========================================================
class: small-code
- There are other functions that work inside of ```select()```
- See: ```starts_with()``` or ```contains()``` or ```matches()```

```{r}
select(salaries, starts_with("s"))
```

rename() function
========================================================

class: small-code
- ```rename()``` returns the full data, but changes variable names

```{r}
rename(salaries, name = employee_name)
```

filter() function
========================================================
class: small-code
- Uses logical statements to subset rows, like if-statements in Stata
    - Returns rows where statement is true
```{r}
yr_2013 <- filter(salaries, year == 2013)
unique(yr_2013$year)
unique(yr_2013$president)
```

Logical operators
========================================================

Description | Symbol
------------- | -------------
less than | ```<```
less than or equal to | ```<=```
greater than | ```>```
greater than or equal to | ```>=```
exactly equal to | ```==```
not equal to | ```!=```
Not x | ```!x```
x OR y | <code>x &#124; y</code>
x AND y | ```x & y```
x within the set of y | ```x %in% y```
x is missing | `is.na(x)`

slice() function
========================================================
class: small-code
- ```slice()``` lets you subset rows by order in the table
    - Similar to using ```[, ]``` notation
```{r}
slice(salaries, 100:105)
```


arrange() function
========================================================
class: small-code
- Lets you reorder data rows according to variables
     - Returns tibble, where ```base::order()``` returns row numbers
     - use ```select()``` to reorder columns
```{r}
arrange(salaries, employee_name, year)
```

arrange() function
========================================================
class: small-code
- The `desc()` function sorts in descending order
```{r}
arrange(salaries, desc(salary))
```


mutate() function
========================================================
class: small-code
- Creates new variables based on other
```{r}
new <- mutate(salaries, in_1000s = salary / 1000)
names(new)
summary(new$in_1000s)
```


transmute() function
========================================================
class: small-code
- ```transmute()``` works the same way, but only returns new columns
- Useful if you only need the result
```{r}
transmute(salaries, in_1000s = salary / 1000)
```

if_else() function
========================================================
class: small-code
- Useful for creating dummy variables, applying functions based on a conditional statement
```{r}
new <- transmute(salaries, democrat = if_else(party == "democrat", 1, 0))
summary(new)
```

summarise() function
========================================================
class: small-code
- ```summarise()``` returns a new tibble with results of aggregate functions
    - Best used with ```group_by()``` function
    - Adds group metadata to data object, which is removed with `ungroup()`
    - Grouping affects behavior of functions
    - ```summarise()``` output will have grouping variable as a column
```{r}
salaries %>%
  group_by(gender) %>%
  summarise(mean_salary = mean(salary))
```

Using the "pipe" operator
========================================================
- The ```%>%``` operator is the glue of ```tidyverse``` style
    - Originally from ```magrittr``` package
- Readable way to nest functions
- Automatically inserts previous object/result into the first argument of the next function
    - Creates recipe-like style, each process appears in sequence
    - The result being "piped" can also be referenced with the `.` placeholder


Using the dplyr workflow
========================================================
class: small-code
- Let's practice using these functions together
```{r}
by_year <- salaries %>%
  group_by(year) %>%
  summarise(mean_salary = mean(salary))
by_year
```


========================================================
class: small-code
- Let's create a new column with the length of tenure in years
```{r}
salaries <- salaries %>%
  rename(name = employee_name) %>%
  group_by(name) %>%
  mutate(tenure = rank(year))

select(salaries, name, tenure, salary)
```

========================================================
class: small-code
- Analyze employees by total tenure in White House
```{r}
by_tenure <- salaries %>% 
  group_by(name) %>%                      # look by employee
  summarise(tenure = max(tenure)) %>%     # get full tenure length
  group_by(tenure) %>%                    # new grouping by tenure
  summarise(count = n()) %>%
  mutate(pct = count / sum(count) * 100)
```

========================================================
class: small-code
```{r}
by_tenure
```


Questions?
========================================================

- Resources
    - https://www.tidyverse.org/
    - Online book: *R for Data Science* (http://r4ds.had.co.nz/)
    - [base R vs. `tidyverse` code](https://www.significantdigits.org/2017/10/switching-from-base-r-to-tidyverse/)
    - RStudio cheatsheets
        - Help menu -> Cheatsheets

